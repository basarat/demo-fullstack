{
  "author": {
    "name": "basarat"
  },
  "name": "grunt-ts",
  "description": "Compile and manage your TypeScript project",
  "version": "1.9.0",
  "homepage": "https://github.com/grunt-ts/grunt-ts",
  "repository": {
    "type": "git",
    "url": "git@github.com:grunt-ts/grunt-ts.git"
  },
  "bugs": {
    "url": "https://github.com/grunt-ts/grunt-ts/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/grunt-ts/grunt-ts/blob/master/LICENSE"
    }
  ],
  "main": "grunt.js",
  "maintainers": [
    {
      "name": "basarat",
      "email": "basaratali@gmail.com"
    },
    {
      "name": "jeffmay",
      "email": "viralidealogue@gmail.com"
    },
    {
      "name": "bartvds",
      "email": "bartvanderschoor@gmail.com"
    }
  ],
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "dependencies": {
    "typescript": "0.9.5",
    "chokidar": "0.8.1",
    "underscore": "1.5.1",
    "underscore.string": "2.3.3",
    "es6-promise": "~0.1.1"
  },
  "peerDependencies": {
    "grunt": "~0.4.0"
  },
  "devDependencies": {
    "grunt": "~0.4.0",
    "grunt-tslint": "~0.4.0",
    "grunt-contrib-clean": "~0.4.0",
    "grunt-contrib-jshint": "~0.8.0",
    "grunt-contrib-nodeunit": "~0.2.2",
    "tslint-path-formatter": "~0.1.1",
    "source-map-support": "~0.2.5",
    "jshint-path-reporter": "~0.1.3",
    "grunt-continue": "0.0.1"
  },
  "optionalDependencies": {},
  "keywords": [
    "gruntplugin",
    "typescript",
    "compiler"
  ],
  "contributors": [
    {
      "name": "Basarat Ali Syed",
      "email": "basaratali@gmail.com",
      "url": "http://www.basarat.com"
    },
    {
      "name": "Jeff May",
      "email": "viralidealogue@gmail.com",
      "url": "https://github.com/jeffmay"
    },
    {
      "name": "Bart van der Schoor",
      "email": "bartvanderschoor@gmail.com",
      "url": "https://github.com/Bartvds"
    }
  ],
  "readme": "# grunt-ts\r\n\r\n[![Build Status](https://secure.travis-ci.org/grunt-ts/grunt-ts.png?branch=master)](http://travis-ci.org/grunt-ts/grunt-ts) [![NPM version](https://badge.fury.io/js/grunt-ts.png)](http://badge.fury.io/js/grunt-ts)\r\n\r\nWritten from scratch TypeScript compiler task for GruntJS. It differs from grunt-typescript which is another excellent [grunt plugin for TypeScript](https://npmjs.org/package/grunt-typescript).\r\n\r\nFollowing are the reasons why grunt-ts was created:\r\n\r\n- Written in [TypeScript](https://github.com/grunt-ts/grunt-ts/blob/master/tasks/ts.ts)\r\n- Enables a TypeScript development workflow in addition to simple file compilation. \r\n- Supports overriding the bundled compiler with an alternate version.\r\n\r\nCheck how grunt-ts can help streamline front end development: [Sample usage with AngularJS](http://www.youtube.com/watch?v=0-6vT7xgE4Y&hd=1)\r\n\r\nAdditional / longer / more basic video tutorial: http://youtu.be/Km0DpfX5ZxM\r\n\r\nFor a quickstart see the full featured [Gruntfile](https://github.com/grunt-ts/grunt-ts/blob/master/sample/Gruntfile.js).\r\n\r\n## Key features\r\n\r\n### Compiler support \r\n\r\nSupports the following compiler flags in both original format and camelCase (preferred):\r\n\r\n    --allowBool                   Allow 'bool' as a synonym for 'boolean'.\r\n    --allowImportModule           Allow 'module(...)' as a synonym for 'require(...)'.\r\n    --declaration                 Generates corresponding .d.ts file\r\n    --mapRoot LOCATION            Specifies the location where debugger should locate map files instead of generated locations.\r\n    --module KIND                 Specify module code generation: \"commonjs\" or \"amd\" (grunt-ts default)\r\n    --noImplicitAny               Warn on expressions and declarations with an implied 'any' type.\r\n    --noResolve                   Skip resolution and preprocessing\r\n    --removeComments              Do not emit comments to output (grunt-ts default)\r\n    --sourceMap                   Generates corresponding .map file (grunt-ts default)\r\n    --sourceRoot LOCATION         Specifies the location where debugger should locate TypeScript files instead of source locations.\r\n    --target VERSION              Specify ECMAScript target version: \"ES3\" (tsc default), or \"ES5\" (grunt-ts default)\r\n\r\nThere is also support for js *file concatenation* using `--out`. Additionally supported is an output directory for the generated JavaScript using `--outDir` flag. For file ordering look at JavaScript Generation below. \r\n\r\n\r\n### Reference file generation \r\n\r\nGrunt-ts can generate a reference.ts file which contains a reference to all ts files.\r\n\r\nThis means there will never be a need to cross reference files manually, instead just reference `reference.ts` :) \r\n\r\n#### JavaScript generation and ordering\r\n\r\nWhen a output file is specified via `out` in combination with a reference file via `reference` then grunt-ts uses the generated reference file to *order the code in the generated JavaScript*. \r\n\r\nUse `reference.ts` to specify the order for the few files the build really cares about and leave the rest to be maintained by grunt-ts. \r\n\r\nE.g. in the following case the generated JavaScript for `someBaseClass.ts` is guaranteed to be at the top, and the generated JavaScript for `main.ts` is guaranteed to be at the bottom of the single merged js file. \r\n\r\nEverything between `grunt-start` and `grunt-end` is generated and maintained by grunt-ts. If there is no `grunt-start` section found, it is created. If `reference.ts` does not exist originally, it is also created. \r\n\r\n```typescript\r\n\r\n/// <reference path=\"someBaseClass.ts\" />\r\n\r\n// Put comments here and they are preserved\r\n\r\n//grunt-start\r\n/// <reference path=\"autoreference.ts\" />\r\n/// <reference path=\"someOtherFile.ts\" />\r\n//grunt-end\r\n\r\n\r\n/// <reference path=\"main.ts\" />\r\n```\r\n\r\n#### JavaScript generation redirect\r\n\r\nIf an `outDir` is specified all output JavaScript is redirected to this folder to keep the source folder clean.\r\n\r\n#### AMD / RequireJS support \r\n\r\nWhen both `outDir` and `amdloader` options are specified a JavaScript requireJS loader file is created using the information available from `reference.ts`. \r\n\r\nThe file consists of three sections.:\r\n\r\n* The initial ordered section. \r\n* A middle order independent section loaded asynchronously. \r\n* And a final ordered section.\r\n\r\nE.g the following `reference` file:\r\n\r\n```typescript\r\n/// <reference path=\"classa.ts\" />\r\n\r\n//grunt-start\r\n/// <reference path=\"deep/classb.ts\" />\r\n/// <reference path=\"deep/classc.ts\" />\r\n//grunt-end\r\n\r\n/// <reference path=\"deep/deeper/classd.ts\" />\r\n/// <reference path=\"app.ts\" />\r\n```\r\n\r\nThis corresponds to an `amdloader` (edited for readability): \r\n\r\n```typescript\r\n// initial ordered files\r\ndefine(function (require) {\r\n  require([\"./classa\"],function () {\r\n    // grunt-ts start\r\n    require([\"./deep/classb\",                       \r\n             \"./deep/classc\"],function () {\r\n      // grunt-ts end\r\n      // final ordered files\r\n      require([\"./deep/deeper/classd\"],function () {  \r\n        require([\"./app\"],function () {\r\n          // final ordered file loaded\r\n        });\r\n      });\r\n    });\r\n  });\r\n});\r\n```\r\n\r\n##### Advantage of using amdloader option\r\n\r\nThe following combination of circumstances are the main use-case for amdloader compared to the original Compiler supported AMD: \r\n\r\n* Use RequireJS since allows to debug \"js\" files instead of \"ts\" files. This is useful in some cases, the most common way is using AMD.\r\n* Keep the ability to individually compile only changed files (for a faster dev-compile-run cycle)\r\n* However, File order doesn't matter, even when there is a inter file depenendency (e.g. AngularJS runtime Dependency injection)\r\n\r\nIn such a case it is possible to either create a `loader.js` manually or have grunt create one. \r\n\r\n**Further Explanation** When using `export class Foo{}` at the root level of the file the only way to use the type information of Foo in another file is via an import statement: `import foo = require('./potentially/long/path/to/Foo');`.\r\n\r\nThe ordering implied by this isn't necessary when using a runtime Dependency Injection framework like AngularJS.\r\n\r\nHaving a loader gives the js debugging (+ async) advantages of RequireJS without the overhead of constantly requesting via `import` to get the TypeScript type inference and worrying about file paths when they are not relevant. \r\n\r\nNote: the individual file source-map will continue to work so it is possible to debug individual \"JS\" or \"TS\" files :)\r\n\r\n### Html 2 TypeScript support \r\n\r\nGrunt-ts can re-encode html files into TypeScript and make them available as a variable. \r\n\r\nFor example a file called `test.html`:\r\n```html\r\n<div> Some Content </div>\r\n```\r\n\r\nWill be compiled to a TypeScript file `test.html.ts` containing: \r\n```typescript\r\nmodule test { export var html =  '<div> Some content </div>' } \r\n``` \r\n\r\nThis will export the variable `test.html` within the TypeScript scope to get the content of test.html as a string, with the main benefit of limiting the http-requests needed to load templates in various front-end frameworks.\r\n\r\n#### Html 2 TypeScript usage in AngularJS \r\n\r\nThis is great for putting variables in templateCache: http://docs.angularjs.org/api/ng.$templateCache or even using the html string directly by setting it to the `template` properties (directives/views) instead of `templateUrl`\r\n\r\n#### Html 2 TypeScript usage in EmberJS\r\n\r\nIt is possible to specify this string to the template on a view: http://emberjs.com/api/classes/Ember.View.html \r\n\r\nSpecifically: http://stackoverflow.com/a/9867375/390330\r\n\r\n### Live file watching and building\r\n\r\nGrunt-ts can watch a directory and recompile TypeScript files when any TypeScript file changes, gets added, gets removed. Internallythe `chokidar` module is used to makes sure the project is always build ready :) \r\n\r\n## Installation\r\n\r\nGrunt-ts is published as [npm package](https://npmjs.org/package/grunt-ts):\r\n\r\nFor new projects make sure to have installed nodejs, then install grunt-cli:\r\n\r\n````bash\r\n$ npm install -g grunt-cli\r\n````\r\n\r\nInstall the and save to `package.json` devDependencies:\r\n\r\n````bash\r\n$ npm install grunt-ts --save-dev\r\n````\r\n\r\n### Alternate compiler version\r\n\r\nSupport for both legacy or cutting-edge projects can be enabled using the compiler override:\r\n\r\nAt runtime the plugin will look for an alternate compiler in the same `node_modules` folder. To use a different version of the TypeScript compiler install the required `typescript` version as a *peer* of `grunt-ts`. If no override was found the bundled compiler is used.  \r\n\r\nThe `package.json` would look something like this for a legacy project:\r\n\r\n```javascript\r\n{\r\n  \"devDependencies\": {\r\n    \"grunt\" : \"~0.4.1\",\r\n    \"grunt-ts\" : \"~1.7.3\",\r\n    \"typescript\" : \"0.9.7\"\r\n  }\r\n}\r\n```\r\nNote: make sure to pin the exact TypeScript version (do not use `~` or `>`).\r\n\r\n## Configuration\r\n\r\nCreate a `Gruntfile.js`. Modify it to load grunt-ts by adding the following lines:\r\n\r\n```javascript\r\nmodule.exports = function (grunt) {\r\n\r\n    // load the task \r\n    grunt.loadNpmTasks(\"grunt-ts\");\r\n    \r\n    // Configure grunt here\r\n}\r\n```\r\n\r\nAdd some configuration for the plugin:\r\n\r\n```javascript\r\ngrunt.initConfig({\r\n    ...\r\n    ts: {\r\n\t\t// A specific target\r\n        build: {\r\n\t\t\t// The source TypeScript files, http://gruntjs.com/configuring-tasks#files\r\n\t\t\tsrc: [\"test/work/**/*.ts\"],\r\n\t\t\t// The source html files, https://github.com/grunt-ts/grunt-ts#html-2-typescript-support   \r\n            html: [\"test/work/**/*.tpl.html\"], \r\n\t\t\t// If specified, generate this file that to can use for reference management\r\n\t\t\treference: \"./test/reference.ts\",  \r\n\t\t\t// If specified, generate an out.js file which is the merged js file\r\n            out: 'test/out.js',\r\n\t\t\t// If specified, the generate JavaScript files are placed here. Only works if out is not specified\r\n            outDir: 'test/outputdirectory',\r\n\t\t\t// If specified, watches this directory for changes, and re-runs the current target\r\n            watch: 'test',                     \r\n\t\t\t// Use to override the default options, http://gruntjs.com/configuring-tasks#options\r\n            options: {     \r\n\t\t\t\t// 'es3' (default) | 'es5'\r\n                target: 'es3',\r\n\t\t\t\t// 'amd' (default) | 'commonjs'    \r\n                module: 'commonjs',\r\n\t\t\t\t// true (default) | false\r\n                sourceMap: true,\r\n\t\t\t\t// true | false (default)\r\n                declaration: false,\r\n\t\t\t\t// true (default) | false\r\n                removeComments: true\r\n            },\r\n        },\r\n\t\t// Another target\r\n        dist: {                               \r\n            src: [\"test/work/**/*.ts\"],\r\n\t\t\t// Override the main options for this target\r\n            options: {\r\n                sourceMap: false,\r\n            }\r\n        },\r\n    },\r\n    ...\r\n});\r\n```\r\n\r\nIt is recommended to add a default target to run in case no arguments to grunt are specified: \r\n\r\n```js\r\ngrunt.registerTask(\"default\", [\"ts:build\"]);\r\n```\r\n\r\nFor an example of an up-to-date configuration look at the [sample gruntfile](https://github.com/grunt-ts/grunt-ts/blob/master/sample/Gruntfile.js) \r\n   \r\n### Different configurations per target  \r\n \r\nGrunt-ts supports the Grunt convention of having [multiple configuration targets](http://gruntjs.com/configuring-tasks#options) per task. It is convenient to have one set of default options and then override these selectively for a target (e.g `build` , `dev`, `staging` etc).\r\n\r\n### Awesome file globs\r\n\r\nFor advanced use-cases there is support for [Grunt's selection options](http://gruntjs.com/configuring-tasks#files), such as using globbing or using a callback to filter paths.\r\n\r\n## Contributing\r\n\r\nWith npm and grunt-cli installed, run the following from the root of the repository:\r\n\r\n```bash\r\n$ npm install\r\n```\r\n\r\n### Building the project:\r\n\r\n```bash\r\n$ grunt build\r\n```\r\n### Running the tests builds:\r\n\r\n```bash\r\n$ grunt test\r\n```\r\n\r\nWe welcome new methods for writing automated tests that are a little less of a manual process.\r\n\r\n## License\r\n\r\nLicensed under the MIT License. \r\n",
  "readmeFilename": "README.md",
  "_id": "grunt-ts@1.9.0",
  "dist": {
    "shasum": "45af6f10489c50a4e807d8c62ce6aa97850cf601"
  },
  "_from": "grunt-ts@1.9.0",
  "_resolved": "https://registry.npmjs.org/grunt-ts/-/grunt-ts-1.9.0.tgz"
}
